@page "/fileupload"
@using hello_rusy.Data
@using Azure.Storage.Blobs
@using Azure.Storage.Blobs.Models
@using Azure.Storage.Sas
@using Azure.Storage
@inject IConfiguration Configuration
@inject NavigationManager Navigation

<PageTitle>File upload</PageTitle>

<div class="page-wrapper">
    <div class="content-wrapper">
        <h1>Upload</h1>

        <p>Note: Uploading is currently disabled. To see examples of processed files, navigate to the View tab</p>
        <InputFile OnChange="HandleFileSelection" />
        <button @onclick="UploadFile">Upload</button>

        @if (uploadSuccess)
        {
            <div class="alert alert-success" role="alert">
                File uploaded successfully!
            </div>
            <p>
                Filename: @uploadFileName
            </p>
        }
        else if (fileSubmitted)
        {
            <div class="alert alert-success" role="alert">
                File uploading, Please wait.
            </div>
        }
    </div>
    <footer style="text-align: center; font-size: small; margin-top: 50px;">
        <p>
            Files uploaded will not be processed without author's approval due to security and cost. To see existing examples of processed videos, navigate to the View tab.
            <br />
            Contact: Ruslana Yurtyn | Email: rny4@cornell.edu
        </p>

    </footer>
</div>

@code {
    private IBrowserFile file;
    private bool fileSubmitted = false;
    private bool uploadSuccess = false;
    private string uploadFileName;
    private string videoId;


    private void HandleFileSelection(InputFileChangeEventArgs e)
    {
        file = e.File; // Store the first selected file
    }

    private async Task UploadFile()
    {
        // TODO: make sure you can't submit one file twice 
        if (file == null) return; // Check if a file has been selected
        fileSubmitted = true;

        // Retrieve configuration settings
        string blobConnectionString = Configuration["AzureBlobStorageInputVideoFiles:ConnectionString"];
        string containerName = Configuration["AzureBlobStorageInputVideoFiles:ContainerName"];

        // Generate the current timestamp
        string timestamp = DateTime.UtcNow.ToString("yyyyMMddHHmmss");

        // Extract file extension
        string extension = Path.GetExtension(file.Name).ToLower();
        // TODO: add check that makes sure hte extention is .mp4 
        Console.WriteLine("BLOB EXTENSION: " + extension);
        string filenameWithoutExtension = Path.GetFileNameWithoutExtension(file.Name);

        // Ensure the filename is under 80 characters after adding the timestamp
        // If it goes over the limit, you can hash the filename
        int maxFilenameLength = 80 - timestamp.Length - extension.Length - 1; // -1 for the underscore
                                                                              // If the filename is longer than 80 characters, truncate it 
        string safeFilename = filenameWithoutExtension.Length > maxFilenameLength ? filenameWithoutExtension.Substring(0, maxFilenameLength) : filenameWithoutExtension;

        // Append the timestamp to the filename
        uploadFileName = $"{safeFilename}_{timestamp}{extension}";

        // Construct the full Blob URI including the new file name and SAS Token
        var blobServiceClient = new BlobServiceClient(blobConnectionString);

        // Create or reference an existing container
        var containerClient = blobServiceClient.GetBlobContainerClient(containerName);
        string blobName = $"{uploadFileName}";
        Console.WriteLine("Blob Name: " + blobName);

        var blobClient = containerClient.GetBlobClient(blobName);

        // Upload the file
        await using (var stream = file.OpenReadStream(maxAllowedSize: 155214716)) // Adjust the maxAllowedSize as necessary
        {
            await blobClient.UploadAsync(stream, new BlobHttpHeaders { ContentType = file.ContentType });
        }
        fileSubmitted = false;
        uploadSuccess = true;

        videoId = await RetrieveVideoId(uploadFileName);

        // Redirect to a success page or display a success message
        Navigation.NavigateTo("/fileupload");
    }

    private async Task<string> RetrieveVideoId(string fileName)
    {

        return fileName;
    }
}

