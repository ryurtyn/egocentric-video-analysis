@page "/fileupload"
@using hello_rusy.Data
@using Azure.Storage.Blobs
@using Azure.Storage.Blobs.Models
@using Azure.Storage.Sas
@using Azure.Storage
@inject IConfiguration Configuration
@inject NavigationManager Navigation

<PageTitle>File upload</PageTitle>

<h1>Upload</h1>

<InputFile OnChange="HandleFileSelection" />
<button @onclick="UploadFile">Upload</button>

@if (uploadSuccess)
{
    <div class="alert alert-success" role="alert">
        File uploaded successfully!
    </div>
    <p>
        Filename: @uploadFileName
    </p>
} else if (fileSubmitted)
{
    <div class="alert alert-success" role="alert">
        File uploading, Please wait.
    </div>
}


@code {
    private IBrowserFile file;
    private bool fileSubmitted = false;
    private bool uploadSuccess = false;
    private string uploadFileName;
    private string videoId;


    private void HandleFileSelection(InputFileChangeEventArgs e)
    {
        file = e.File; // Store the first selected file
    }

    private async Task UploadFile()
    {
        // TODO: make sure the filename is under 80 characters. If it goes over the limit, rename it (md5 hash) 
        if (file == null) return; // Check if a file has been selected
        fileSubmitted = true;

        // Retrieve configuration settings
        //string blobUriString = Configuration["AzureBlobStorage:BlobUri"]; // old not needed 
        //string sasToken = Configuration["AzureBlobStorage:SasToken"]; // old not needed
        //string blobConnectionString = Configuration["ConnectionStrings:AzureBlobStorage"]; // connection string redesign 
        string blobConnectionString = Configuration["AzureBlobStorageInputVideoFiles:ConnectionString"];
        string containerName = Configuration["AzureBlobStorageInputVideoFiles:ContainerName"];

        // Generate the current timestamp
        string timestamp = DateTime.UtcNow.ToString("yyyyMMddHHmmss");

        // Extract file extension
        string extension = Path.GetExtension(file.Name).ToLower();
        // TODO: add check that makes sure hte extention is .mp4 
        Console.WriteLine("BLOB EXTENSION: " + extension);
        string filenameWithoutExtension = Path.GetFileNameWithoutExtension(file.Name);

        // Ensure the filename is under 80 characters after adding the timestamp
        // If it goes over the limit, you can hash the filename
        // For simplicity, this example truncates the filename before appending the timestamp
        int maxFilenameLength = 80 - timestamp.Length - extension.Length - 1; // -1 for the underscore
                                                                              // If the filename is longer than 80 characters, truncate it 
        string safeFilename = filenameWithoutExtension.Length > maxFilenameLength ? filenameWithoutExtension.Substring(0, maxFilenameLength) : filenameWithoutExtension;

        // Append the timestamp to the filename
        uploadFileName = $"{safeFilename}_{timestamp}{extension}";

        // Construct the full Blob URI including the new file name and SAS Token
        var blobServiceClient = new BlobServiceClient(blobConnectionString);

        // Create or reference an existing container
        var containerClient = blobServiceClient.GetBlobContainerClient(containerName);
        string blobName = $"{uploadFileName}";
        Console.WriteLine("Blob Name: " + blobName);

        //Uri blobUri = new Uri($"{blobUriString}/{uploadFileName}?{sasToken}");
        //Console.WriteLine("BLOB URI: ", blobUri);
        // Create a BlobClient using the Blob URI with the SAS Token
        var blobClient = containerClient.GetBlobClient(blobName);
        //BlobClient blobClient = new BlobClient(blobUri);

        // Upload the file
        await using (var stream = file.OpenReadStream(maxAllowedSize: 155214716)) // Adjust the maxAllowedSize as necessary
        {
            await blobClient.UploadAsync(stream, new BlobHttpHeaders { ContentType = file.ContentType });
        }
        fileSubmitted = false;
        uploadSuccess = true;

        videoId = await RetrieveVideoId(uploadFileName);

        // Redirect to a success page or display a success message
        Navigation.NavigateTo("/fileupload");
    }

    private async Task<string> RetrieveVideoId(string fileName)
    {

        return fileName;
    }
}