@page "/listvideos"
@using hello_rusy.Data
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject VideoIndexerService videoIndexerServiceInstance
@inject VideoMetadataService videoMetadataServiceInstance
@inject OpenAIService openAIServiceInstance
@inject LanguageAIService languageAIServiceInstance

<PageTitle>Procedural Task Videos</PageTitle>

@*<link href="styles.css" rel="stylesheet" />*@
<h1>Procedural Task Videos</h1>

@if (titleMappings == null)
{
     <p > <em > Loading...</em > </p >
}
else
{
     <table class="table" >
    <thead >
        <tr>
            <th> Title</th>
            <th> Created On</th>
            <th> Last Processed</th>
            <th> Actions</th> 
        </tr>
    </thead >
    <tbody >
    @foreach (var mapping in titleMappings.filesList)
        {
                <tr>
                    <td>
                        @if (mapping.summarizedTitle != "")
                        {

                            <a href="" @onclick="(() => NavigateToDisplayResults(mapping.videoName))">@mapping.summarizedTitle </a>
                        }
                        else
                        {
                            <a href="" @onclick="(() => NavigateToDisplayResults(mapping.videoName))">@mapping.videoName </a>
                        }
                    </td>
                    <td>
                        @if (mapping.CreatedDate != null)
                        {

                            @mapping.CreatedDate
                        }
                    </td>
                    <td>
                        @if (mapping.ProcessedDate != null)
                        {

                            @mapping.ProcessedDate
                        }
                    </td>

                    <td>
                        @*Button to trigger data processing*@
                        @if (!(mapping.isProcessing))
                        {
                            @*<span class="spinner"></span>*@
                            <button class="btn-primary" @onclick="(async () => await ProcessButtonClick(mapping, config))"> Process</button>
                        }
                        else
                        {

                            <span class="spinner"></span>
                        }
                        @*<button @onclick="(() => await GenerateInsights(mapping.videoName))">Process</button>*@
                    </td>

                </tr>
        }
    </tbody >
    </table >
}

@code {
    private VideoIndexerList? videoIndexerList;
    private TitleMappings? titleMappings;
    private EgocentricVideoConfig config;

    protected override async Task OnInitializedAsync()
    {
        //string accessToken = Configuration["VideoIndexer:AccessToken"];
        //string accountId = Configuration["VideoIndexer:AccountId"];
        //string location = Configuration["VideoIndexer:Location"];
        //string subscriptionKey = Configuration["VideoIndexer:SubscriptionKey"];

        config = new EgocentricVideoConfig(
            videoIndexerApiKey: Configuration["VideoIndexer:AccessToken"],
            videoIndexerAccountId: Configuration["VideoIndexer:AccountId"],
            videoIndexerLocation: Configuration["VideoIndexer:Location"],
            videoIndexerSubscriptionKey: Configuration["VideoIndexer:SubscriptionKey"],
            dataFileConnectionString: Configuration?["AzureBlobStorageDataFiles:ConnectionString"] ?? "",
            dataFileContainerName: Configuration?["AzureBlobStorageDataFiles:ContainerName"] ?? "",
            openAIApiKey: Configuration?["OpenAI:APIKey"] ?? "",
            languageServiceApiKey: Configuration?["LanguageAI:SubscriptionKey"] ?? ""
            );

        titleMappings = await LoadTitleMappings(config);

        //string blobConnectionString = Configuration?["ConnectionStrings:AzureBlobStorage"] ?? "";
        ////videoIndexerList = await videoIndexerServiceInstance.GetAllVideos(accessToken, accountId, location, subscriptionKey);
        //VideoMetadataController videoMetadataControllerInstance = new VideoMetadataController(videoIndexerServiceInstance, openAIServiceInstance, videoMetadataServiceInstance, languageAIServiceInstance);
        //titleMappings = await videoMetadataControllerInstance.RetrieveTitleMappings(blobConnectionString);

    }

    private async Task<TitleMappings> LoadTitleMappings(EgocentricVideoConfig config)
    {
        string blobConnectionString = config.dataFileConnectionString;
        //videoIndexerList = await videoIndexerServiceInstance.GetAllVideos(accessToken, accountId, location, subscriptionKey);
        VideoMetadataController videoMetadataControllerInstance = new VideoMetadataController(videoIndexerServiceInstance, openAIServiceInstance, videoMetadataServiceInstance, languageAIServiceInstance);
        titleMappings = await videoMetadataControllerInstance.RetrieveTitleMappings(config);
        return titleMappings;
    }

    private void NavigateToDisplayResults(string videoName)
    {
        var uri = NavigationManager.ToAbsoluteUri($"/requestresults?videoId={Uri.EscapeDataString(videoName)}");
        NavigationManager.NavigateTo(uri.ToString());
    }

    private async Task ProcessButtonClick(Mapping mapping, EgocentricVideoConfig config)
    {
        mapping.isProcessing = true;
        await GenerateInsights(mapping.videoName, config);
        titleMappings = await LoadTitleMappings(config);
        mapping.isProcessing = false;
    }

    private async Task GenerateInsights(string filename, EgocentricVideoConfig config)
    {
        //TODO: create your own configuration object to make it easier to pass in configurations
        //string accessToken = Configuration?["VideoIndexer:AccessToken"] ?? "";
        //string accountId = Configuration?["VideoIndexer:AccountId"] ?? "";
        //string location = Configuration?["VideoIndexer:Location"] ?? "";
        //string subscriptionKey = Configuration?["VideoIndexer:SubscriptionKey"] ?? "";
        //string blobConnectionString = Configuration?["ConnectionStrings:AzureBlobStorage"] ?? "";
        //string openAIKey = Configuration?["OpenAI:APIKey"] ?? "";
        //string languageServiceAPIKey = Configuration?["LanguageAI:SubscriptionKey"] ?? "";


        // Initialize video media controller with relevant services passed in
        VideoMetadataController videoMetadataControllerInstance = new VideoMetadataController(videoIndexerServiceInstance, openAIServiceInstance, videoMetadataServiceInstance, languageAIServiceInstance);
        await videoMetadataControllerInstance.GenerateAllMetadata(filename, config);

        //string blobConnectionString = Configuration["ConnectionStrings:AzureBlobStorage"];
        //await VideoMetadataServiceInstance.GenerateInsights(filename, blobConnectionString);

    }



}

