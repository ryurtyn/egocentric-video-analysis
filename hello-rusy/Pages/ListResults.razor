@page "/listvideos"
@using hello_rusy.Data
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject VideoIndexerService videoIndexerServiceInstance
@inject VideoMetadataService videoMetadataServiceInstance
@inject OpenAIService openAIServiceInstance
@inject LanguageAIService languageAIServiceInstance

<PageTitle>Team Updates</PageTitle>

@*<link href="styles.css" rel="stylesheet" />*@
<h1>Team Updates</h1>

@if (titleMappings == null)
{
     <p > <em > Loading...</em > </p >
}
else
{
     <table class="table" >
    <thead >
    <tr >
    <th > Title</th >
    <th > Actions</th > <!-- New column for actions -->
    </tr >
    </thead >
    <tbody >
    @foreach (var mapping in titleMappings.filesList)
        {
                <tr >
                <td >
                @if (mapping.summarizedTitle != "")
                {

                        <a href="" @onclick="(() => NavigateToDisplayResults(mapping.videoName))" >@mapping.summarizedTitle </a >
                }
                else
                {
                        <a href="" @onclick="(() => NavigateToDisplayResults(mapping.videoName))" >@mapping.videoName </a >
                }
                </td >
                @*<td>@result.State</td>
                <td>@result.Created.ToString("M/d/yyyy h:mm:ss tt")</td>*@
                    <td>
                        <!-- Button to trigger data processing -->
                        @if (!(mapping.isProcessing))
                            {
                                <button class="btn-primary"  @onclick="(async () => await ProcessButtonClick(mapping))"> Process</button>
                            } else
                            {

                               <span class="spinner"></span>
                            }
                        @*<button @onclick="(() => await GenerateInsights(mapping.videoName))">Process</button>*@
                    </td>
            </tr >
        }
    </tbody >
    </table >
}

@code {
    private VideoIndexerList? videoIndexerList;
    private TitleMappings? titleMappings;

    protected override async Task OnInitializedAsync()
    {
        string accessToken = Configuration["VideoIndexer:AccessToken"];
        string accountId = Configuration["VideoIndexer:AccountId"];
        string location = Configuration["VideoIndexer:Location"];
        string subscriptionKey = Configuration["VideoIndexer:SubscriptionKey"];

        titleMappings = await LoadTitleMappings();

        //string blobConnectionString = Configuration?["ConnectionStrings:AzureBlobStorage"] ?? "";
        ////videoIndexerList = await videoIndexerServiceInstance.GetAllVideos(accessToken, accountId, location, subscriptionKey);
        //VideoMetadataController videoMetadataControllerInstance = new VideoMetadataController(videoIndexerServiceInstance, openAIServiceInstance, videoMetadataServiceInstance, languageAIServiceInstance);
        //titleMappings = await videoMetadataControllerInstance.RetrieveTitleMappings(blobConnectionString);

    }

    private async Task<TitleMappings> LoadTitleMappings()
    {
        string blobConnectionString = Configuration?["ConnectionStrings:AzureBlobStorage"] ?? "";
        //videoIndexerList = await videoIndexerServiceInstance.GetAllVideos(accessToken, accountId, location, subscriptionKey);
        VideoMetadataController videoMetadataControllerInstance = new VideoMetadataController(videoIndexerServiceInstance, openAIServiceInstance, videoMetadataServiceInstance, languageAIServiceInstance);
        titleMappings = await videoMetadataControllerInstance.RetrieveTitleMappings(blobConnectionString);
        return titleMappings;
    }

    private void NavigateToDisplayResults(string videoName)
    {
        var uri = NavigationManager.ToAbsoluteUri($"/requestresults?videoId={Uri.EscapeDataString(videoName)}");
        NavigationManager.NavigateTo(uri.ToString());
    }

    private async Task ProcessButtonClick(Mapping mapping)
    {
        mapping.isProcessing = true;
        await GenerateInsights(mapping.videoName);
        titleMappings = await LoadTitleMappings();
        mapping.isProcessing = false;
    }

    private async Task GenerateInsights(string filename)
    {
        //TODO: create your own configuration object to make it easier to pass in configurations
        string accessToken = Configuration?["VideoIndexer:AccessToken"] ?? "";
        string accountId = Configuration?["VideoIndexer:AccountId"] ?? "";
        string location = Configuration?["VideoIndexer:Location"] ?? "";
        string subscriptionKey = Configuration?["VideoIndexer:SubscriptionKey"] ?? "";
        string blobConnectionString = Configuration?["ConnectionStrings:AzureBlobStorage"] ?? "";
        string openAIKey = Configuration?["OpenAI:APIKey"] ?? "";
        string languageServiceAPIKey = Configuration?["LanguageAI:SubscriptionKey"] ?? "";

        // Initialize video media controller with relevant services passed in
        VideoMetadataController videoMetadataControllerInstance = new VideoMetadataController(videoIndexerServiceInstance, openAIServiceInstance, videoMetadataServiceInstance, languageAIServiceInstance);
        await videoMetadataControllerInstance.GenerateAllMetadata(filename, accessToken, accountId, location, subscriptionKey, blobConnectionString, openAIKey, languageServiceAPIKey);

        //string blobConnectionString = Configuration["ConnectionStrings:AzureBlobStorage"];
        //await VideoMetadataServiceInstance.GenerateInsights(filename, blobConnectionString);

    }



}

