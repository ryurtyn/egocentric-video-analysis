@page "/requestresults"
@using hello_rusy.Data
@using Microsoft.AspNetCore.WebUtilities

@inject IConfiguration Configuration
@inject NavigationManager Navigation
@inject VideoIndexerService videoIndexerServiceInstance
@inject LanguageAIService languageAIServiceInstance
@inject OpenAIService openAIServiceInstance
@inject VideoMetadataService videoMetadataServiceInstance


@inject IJSRuntime JS
@*<link href="styles.css" rel="stylesheet" />*@
<h1>@summarizedTitle</h1>
@*<style>
        #myVideoPlayer {
            width: 30%; /* Adjust the width to your preference */
            margin: auto; /* This centers the video player horizontally */
            display: block; /* Ensures the margin auto has the desired effect */
        }
    </style>*@

@if (responseReceived)
{
    @*<p>Chat Result: @openAIResult</p>*@
    <h2>Tasks</h2>
    <div style="display: flex; flex-wrap: wrap; gap: 20px;">
        <div style="flex: 3; min-width: 300px;">

            <ol>
                @foreach (var todo in todos.ToDos)
                {
                    <li>
                        <button class="btn-primary" @onclick="() => SeekTo(todo.Timestamp)">&#9205;</button>
                        @todo.Task
                    </li>
                }
            </ol>
        </div>

        <div style="flex: 2; min-width: 300px; max-width: 600px;">
            <video id="myVideoPlayer" controls @ref="videoElement" preload="auto" style="width: 100%;">
                <source src="@videoUrl" type="video/mp4">
                Your browser does not support the video tag.
            </video>
        </div>
    </div>
    <h2>Key Words</h2>

    @*<div class="chunk">
        <p>@string.Join(", ", labels)</p>
    </div>
    <div class="chunk">
        <p>@string.Join(", ", topics)</p>
    </div>*@
    <div class="chunk">
        <p>@string.Join(", ", keywords)</p>
    </div>

    <h2>Transcripts</h2>
    <div class="chunk">
        <p>
            @foreach (var t in transcripts)
            {
                @t <br>
            }
        </p>
    </div>


    @*<h2>Key Frames: </h2>
        <style>
            .image-grid {
                display: grid;
                grid-template-columns: repeat(8, 1fr);
                gap: 10px;
                padding-bottom: 20px;
            }
        </style>

        @foreach (var shot in keyframeUrls)
        {
            <div class="image-grid">
                @foreach (var im in shot)
                {
                    <img src="@im" alt="Image" style="width: 100%; height: auto;">
                }
            </div>
        }*@



}
else
{

    <div>
        <label for="videoId">Video Name:</label>
        <input id="videoId" type="text" @bind="videoId" />
    </div>

    <button @onclick="Submit">Submit</button>
}

@code {
    private string videoId;


    private VideoIndexerResult videoInformation;
    private string fileName;
    private string state;
    private List<string> transcripts;
    private List<string> transcriptTimes;
    private List<List<string>> keyframeUrls;

    private List<string> topics;
    private string topicsString;

    private List<string> labels;
    private string labelsString;

    private List<string> sentiments;
    private string sentimentsString;

    private List<string> keywords;
    private string keywordsString;

    private List<string> ocrs;
    private string ocrsString;

    private List<string> detectedObjects;
    private string detectedObjectsString;

    private bool responseReceived = false;

    private TextSummarizerResult textSummaryResult;

    private string summarizedTitle;

    private string openAIResult;
    private ToDoList todos;

    private ElementReference videoElement;
    public string videoUrl;

    private EgocentricVideoConfig config;

    //[Parameter]
    //public double StartTime { get; set; } = 0; // default to start at the beginning


    protected override async Task OnInitializedAsync()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);

        // Check if there's a query string parameter for the video ID
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("videoId", out var videoIds))
        {
            videoId = videoIds.First(); // Assuming you're passing a single ID
            await Submit(); // Automatically fetch and display the results
        }

        //config = new EgocentricVideoConfig(
        //    videoIndexerApiKey: Configuration["VideoIndexer:AccessToken"],
        //    videoIndexerAccountId: Configuration["VideoIndexer:AccountId"],
        //    videoIndexerLocation: Configuration["VideoIndexer:Location"],
        //    videoIndexerSubscriptionKey: Configuration["VideoIndexer:SubscriptionKey"],
        //    dataFileConnectionString: Configuration?["AzureBlobStorageDataFiles:ConnectionString"] ?? "",
        //    dataFileContainerName: Configuration?["AzureBlobStorageDataFiles:ContainerName"] ?? "",
        //    openAIApiKey: Configuration?["OpenAI:APIKey"] ?? "",
        //    languageServiceApiKey: Configuration?["LanguageAI:SubscriptionKey"] ?? ""
        //);
    }

    private async Task Submit()
    {
        //string blobConnectionString = Configuration?["ConnectionStrings:AzureBlobStorage"] ?? "";
        config = new EgocentricVideoConfig(
            videoIndexerApiKey: Configuration["VideoIndexer:AccessToken"],
            videoIndexerAccountId: Configuration["VideoIndexer:AccountId"],
            videoIndexerLocation: Configuration["VideoIndexer:Location"],
            videoIndexerSubscriptionKey: Configuration["VideoIndexer:SubscriptionKey"],
            dataFileConnectionString: Configuration?["AzureBlobStorageDataFiles:ConnectionString"] ?? "",
            dataFileContainerName: Configuration?["AzureBlobStorageDataFiles:ContainerName"] ?? "",
            openAIApiKey: Configuration?["OpenAI:APIKey"] ?? "",
            languageServiceApiKey: Configuration?["LanguageAI:SubscriptionKey"] ?? ""
        );
        VideoMetadataController videoMetadataControllerInstance = new VideoMetadataController(videoIndexerServiceInstance, openAIServiceInstance, videoMetadataServiceInstance, languageAIServiceInstance);
        VideoMetadata videoMetadata = await videoMetadataControllerInstance.RetrieveGeneralMetadata(videoId, config);
        videoUrl = videoMetadata.VideoUrl; // TODO: PROBABLY NOT SECURE
        summarizedTitle = videoMetadata.SummarizedTitle;
        //dateProcessed = videoMetadata.ProcessedDate;
        todos = await videoMetadataControllerInstance.RetrieveOpenAIMetadata(videoId, config);
        VideoIndexerMetadata videoIndexerMetadata = await videoMetadataControllerInstance.RetrieveVideoIndexerMetadata(videoId, config);
        keyframeUrls = videoIndexerMetadata.KeyframeShots;

        transcripts = videoIndexerMetadata.Transcripts;

        //labels = videoIndexerMetadata.Labels;
        //topics = videoIndexerMetadata.Topics;
        keywords = videoIndexerMetadata.Keywords;


        //// need to do the auth key retrieval first

        //string accessToken = Configuration["VideoIndexer:AccessToken"];
        //string accountId = Configuration["VideoIndexer:AccountId"];
        //string location = Configuration["VideoIndexer:Location"];
        //string subscriptionKey = Configuration["VideoIndexer:SubscriptionKey"];

        //videoInformation = await VideoIndexerServiceInstance.GetVideoInsights(videoId, accessToken, accountId, location, subscriptionKey);
        //fileName = videoInformation.Name;
        //state = videoInformation.State;

        //transcripts = VideoIndexerServiceInstance.ExtractTranscriptTexts(videoInformation);
        //transcriptTimes = VideoIndexerServiceInstance.ExtractTranscriptTimestamps(videoInformation);

        //keyframeUrls = VideoIndexerServiceInstance.GetVideoKeyframesByShot(videoInformation, accessToken, accountId, location);
        ////keyframeUrls = VideoIndexerServiceInstance.GetVideoKeyframes(videoInformation, accessToken, accountId, location);

        //topics = VideoIndexerServiceInstance.GetTopics(videoInformation);
        //topicsString = String.Join(", ", topics);

        //labels = VideoIndexerServiceInstance.GetLabels(videoInformation);
        //labelsString = String.Join(", ", labels);

        //sentiments = VideoIndexerServiceInstance.GetSentiments(videoInformation);
        //sentimentsString = String.Join(", ", sentiments);

        //keywords = VideoIndexerServiceInstance.GetKeyWords(videoInformation);
        //keywordsString = String.Join(", ", keywords);

        //ocrs = VideoIndexerServiceInstance.GetOcr(videoInformation);
        //ocrsString = String.Join(", ", ocrs);

        //detectedObjects = VideoIndexerServiceInstance.GetDetectedObjects(videoInformation);
        //detectedObjectsString = String.Join(", ", detectedObjects);

        //string languageServiceSubscriptionKey = Configuration["LanguageAI:SubscriptionKey"];
        //textSummaryResult = await LanguageAIServiceInstance.getTextSummary(languageServiceSubscriptionKey, transcripts);
        //summarizedTitle = LanguageAIServiceInstance.GetSummarizedTitle(textSummaryResult);

        //string openAIApiKey = Configuration["OpenAI:APIKey"];
        //todos = await OpenAIServiceInstance.RequestChatResponse(transcripts, transcriptTimes, openAIApiKey);
        ////todos = await OpenAIServiceInstance.RequestChatResponse("What is 2 + 2? ", openAIApiKey);

        //string blobConnectionString = Configuration["ConnectionStrings:AzureBlobStorage"];
        //VideoUrl = await VideoMetadataServiceInstance.GetVideoUrl(fileName, blobConnectionString);

        responseReceived = true;

    }


    //private async Task OnMetadataLoaded()
    //{
    //    await JS.InvokeVoidAsync("eval", $"document.getElementById('myVideoPlayer').currentTime = {StartTime};");
    //}

    private async Task SeekTo(string timestamp)
    {
        int timestampDouble = ConvertTimeToSeconds(timestamp);
        //StartTime = timestampDouble;
        Console.WriteLine("TIMESTAMP: " + timestampDouble);
        await JS.InvokeVoidAsync("setVideoCurrentTime", "myVideoPlayer", timestampDouble.ToString());
        //await JS.InvokeVoidAsync("eval", $"document.getElementById('myVideoPlayer').currentTime = {timestampDouble.ToString()};");
    }

    public static int ConvertTimeToSeconds(string time)
    {
        double totalSeconds = 0;
        if (TimeSpan.TryParse(time, out TimeSpan result))
        {
            totalSeconds = result.TotalSeconds;
        }

        return (int)totalSeconds;
    }
}