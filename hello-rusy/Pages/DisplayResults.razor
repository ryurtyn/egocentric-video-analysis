@page "/requestresults"
@using hello_rusy.Data
@using Microsoft.AspNetCore.WebUtilities

@inject IConfiguration Configuration
@inject NavigationManager Navigation
@inject VideoIndexerService videoIndexerServiceInstance
@inject LanguageAIService languageAIServiceInstance
@inject OpenAIService openAIServiceInstance
@inject VideoMetadataService videoMetadataServiceInstance


@inject IJSRuntime JS

<h1>@summarizedTitle</h1>


@if (responseReceived)
{
    <h2>Tasks</h2>
    <div style="display: flex; flex-wrap: wrap; gap: 20px;">
        <div style="flex: 3; min-width: 300px;">
            <button class="state-refresh-button" id="stateRefreshButton" @onclick="() => StateHasChanged()"></button>
            <ol>
                @for (int i = 0; i < todos.ToDos.Count; i++)
                    {
                        bool isActive = activeToDoItems.Contains(i);
                        <li>
                            <button class="btn-primary@(isActive?"-active":"")" id="todo-buttons-@i" @onclick="() => SeekTo(todos.ToDos[i].Timestamp)">&#9205;</button>
                            @todos.ToDos[i].Task
                        </li>
                    }
                </ol>
        </div>

        <div style="flex: 2; min-width: 300px; max-width: 600px;">
            <video id="myVideoPlayer" controls @ref="videoElement" preload="auto" style="width: 100%;">
                <source src="@videoUrl" type="video/mp4">
                Your browser does not support the video tag.
            </video>

            @code {
                private ElementReference videoElement; // Reference to the video element
                public string videoUrl; // URL of the video to play
                // Call JavaScript to attach event listeners once the video element is available
                protected override async Task OnAfterRenderAsync(bool firstRender)
                {
                    if (firstRender)
                    {
                        await JS.InvokeVoidAsync("timestampTaskFeedback");
                    }
                }
            }

        </div>
    </div>
    <h2>Key Words</h2>
    <div class="chunk">
        <p>@string.Join(", ", keywords)</p>
    </div>

    <h2>Transcripts</h2>
    <div class="chunk">
        <p>
            @foreach (var t in transcripts)
            {
                @t <br>
            }
        </p>
    </div>

}
else
{

    <div>
        <label for="videoId">Video Name:</label>
        <input id="videoId" type="text" @bind="videoId" />
    </div>

    <button @onclick="Submit">Submit</button>
}

@code {
    private bool responseReceived = false;
    private string videoId;

    private List<string> transcripts;
    private List<string> keywords;
    private string keywordsString;

    private string summarizedTitle;

    private static ToDoList todos;
    private static List<int> activeToDoItems = new List<int>();

    private EgocentricVideoConfig config;

    protected override async Task OnInitializedAsync()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);

        // Check if there's a query string parameter for the video ID
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("videoId", out var videoIds))
        {
            videoId = videoIds.First();
            await Submit();

        }

    }

    private async Task Submit()
    {
        config = new EgocentricVideoConfig(
            videoIndexerApiKey: Configuration["VideoIndexer:AccessToken"],
            videoIndexerAccountId: Configuration["VideoIndexer:AccountId"],
            videoIndexerLocation: Configuration["VideoIndexer:Location"],
            videoIndexerSubscriptionKey: Configuration["VideoIndexer:SubscriptionKey"],
            dataFileConnectionString: Configuration?["AzureBlobStorageDataFiles:ConnectionString"] ?? "",
            dataFileContainerName: Configuration?["AzureBlobStorageDataFiles:ContainerName"] ?? "",
            openAIApiKey: Configuration?["OpenAI:APIKey"] ?? "",
            languageServiceApiKey: Configuration?["LanguageAI:SubscriptionKey"] ?? ""
        );
        VideoMetadataController videoMetadataControllerInstance = new VideoMetadataController(videoIndexerServiceInstance, openAIServiceInstance, videoMetadataServiceInstance, languageAIServiceInstance);
        VideoMetadata videoMetadata = await videoMetadataControllerInstance.RetrieveGeneralMetadata(videoId, config);
        videoUrl = videoMetadata.VideoUrl;
        summarizedTitle = videoMetadata.SummarizedTitle;
        todos = await videoMetadataControllerInstance.RetrieveOpenAIMetadata(videoId, config);
        VideoIndexerMetadata videoIndexerMetadata = await videoMetadataControllerInstance.RetrieveVideoIndexerMetadata(videoId, config);
        transcripts = videoIndexerMetadata.Transcripts;
        keywords = videoIndexerMetadata.Keywords;
        responseReceived = true;
    }

    private async Task SeekTo(string timestamp)
    {
        int timestampDouble = ConvertTimeToSeconds(timestamp);
        await JS.InvokeVoidAsync("setVideoCurrentTime", "myVideoPlayer", timestampDouble.ToString());
    }

    public static int ConvertTimeToSeconds(string time)
    {
        double totalSeconds = 0;
        if (TimeSpan.TryParse(time, out TimeSpan result))
        {
            totalSeconds = result.TotalSeconds;
        }

        return (int)totalSeconds;
    }

    public static List<int> FindActiveIndices(List<float> timestamps, float currentTimestamp)
        {
            float maxValueUnderCurrent = int.MinValue;
            List<int> active_indices = new List<int>();

            foreach (var timestamp in timestamps)
            {
                if (timestamp < currentTimestamp && timestamp > maxValueUnderCurrent)
                {
                    maxValueUnderCurrent = timestamp;
                }
            }

            for (int i = 0; i < timestamps.Count; i++ )
            {
                if (timestamps[i] == maxValueUnderCurrent)
                {
                    active_indices.Add(i);
                }
            }
            return active_indices;
        }

    [JSInvokable]
    public static Task<List<int>> ChangeActiveTimestamp(float currentTime)
    {
            if (todos != null) {
                List<ToDoItem> todoItems = todos.ToDos;
                List<float> timestamps = new List<float>();
                foreach (ToDoItem item in todoItems)
                {
                    int timestamp = ConvertTimeToSeconds(item.Timestamp);
                    timestamps.Add((float)timestamp);
                }
                List<int> activeIndices = FindActiveIndices(timestamps, currentTime);
                activeToDoItems = activeIndices;
                return Task.FromResult(activeIndices);
                
            } else
            {
                activeToDoItems = new List<int>();
                return Task.FromResult(new List<int>());
            }
        }
}