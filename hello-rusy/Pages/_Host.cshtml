@page "/"
@using Microsoft.AspNetCore.Components.Web
@namespace hello_rusy.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="~/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="css/site.css" rel="stylesheet" />
    <link href="hello-rusy.styles.css" rel="stylesheet" />
    <link href="my-styles.css" rel="stylesheet" />
    @*<link href="hello-rusy.tooplate-style.css" rel="stylesheet" />*@
    <link rel="icon" type="image/png" href="favicon.png" />
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />
</head>
<body>
    <component type="typeof(App)" render-mode="ServerPrerendered" />

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="_framework/blazor.server.js"></script>
    <script>
        // sets the time of video in Display Results page 
        function setVideoCurrentTime(videoId, time) {
            console.log("Video ID: " + videoId + ", Time: " + time);
            const video = document.getElementById(videoId);
            if (video) {
                video.currentTime = time;
                video.play();
                console.log("New Time: " + video.currentTime);
            } else {
                console.error('Video element not found');
            }
        }

        
        // changes the color of the current task in Display Results page 
        function timestampTaskFeedback() {
            let maxTries = 10;
            let numTries = 0;
            var video = document.getElementById('myVideoPlayer');

            if (video) {
                var highlightCurrentTask = function highlightCurrentTask() {
                    console.log('currentTime of the player is:', video.currentTime);
                    
                    DotNet.invokeMethodAsync('hello-rusy', 'ChangeActiveTimestamp', video.currentTime)
                        .then((data) => {
                            var stateRefreshButton = document.getElementById("stateRefreshButton");
                            stateRefreshButton.click();
                        });
                    
                }

                video.addEventListener('play', () => {
                    video._updateInterval = setInterval(() => {
                        highlightCurrentTask()
                    }, 1000);
                }, true);

                video.addEventListener('pause', () => clearInterval(video._updateInterval), true);
            } else if (numTries < maxTries) {
                setTimeout(timestampTaskFeedback, 1000);
                numTries++; 
            }


        }

    </script>
</body>
</html>

