@page "/"
@using Microsoft.AspNetCore.Components.Web
@namespace hello_rusy.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="~/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="css/site.css" rel="stylesheet" />
    <link href="hello-rusy.styles.css" rel="stylesheet" />
    <link href="my-styles.css" rel="stylesheet" />
    @*<link href="hello-rusy.tooplate-style.css" rel="stylesheet" />*@
    <link rel="icon" type="image/png" href="favicon.png" />
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />
</head>
<body>
    <component type="typeof(App)" render-mode="ServerPrerendered" />

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="_framework/blazor.server.js"></script>
    <script>
        function setVideoCurrentTime(videoId, time) {
            console.log("Video ID: " + videoId + ", Time: " + time);
            const video = document.getElementById(videoId);
            if (video) {
                console.log("Old time: " + video.currentTime);
                console.log("Time: " + time);
                //video.pause();
                video.currentTime = time;
                video.play();
                console.log("New Time: " + video.currentTime);
            } else {
                console.error('Video element not found');
            }
        }

        function setupVideoTimestampFeedback() {
            var video = document.getElementById('myVideoPlayer');

            video.addEventListener('loadedmetadata', () => {
                console.log("Video metadata loaded.");
                video._updateInterval = setInterval(() => {
                    console.log('currentTime of the player is:', video.currentTime);
                }, 1000);
            });

            video.addEventListener('play', () => {
                if (!video._updateInterval) {
                    video._updateInterval = setInterval(() => {
                        console.log('currentTime of the player is:', video.currentTime);
                    }, 1000);
                }
            }, true);

            video.addEventListener('pause', () => {
                if (video._updateInterval) {
                    clearInterval(video._updateInterval);
                    video._updateInterval = null;
                }
            }, true);
        }

        function timestampTaskFeedback() {
            console.log("Function called");
            var video = document.getElementById('myVideoPlayer');	

            var highlightCurrentTask = function highlightCurrentTask() {
                console.log('currentTime of the player is:', video.currentTime);
            }

            video.addEventListener('play', () => {
              video._updateInterval = setInterval(() => {
                highlightCurrentTask()
              }, 1000);
            }, true);

            video.addEventListener('pause', () => clearInterval(video._updateInterval), true);
        }

    </script>
</body>
</html>

